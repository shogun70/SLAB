<?xml version="1.0"?>
<html>
<head>
<script type="text/html" src="ECMAScript5.xhtml"></script>
<script type="text/html" src="DOM/System.xhtml"></script>
<script type="text/html" src="DOM/Core.xhtml"></script>
<script type="text/html" src="DOM/Events.xhtml"></script>
<script type="text/html" src="DOM/Traversal.xhtml"></script>
<script type="text/html" src="DOM/HTML.xhtml"></script>
<script type="text/html" src="DOM/Selectors.xhtml"></script>
<script>
<![CDATA[

NodeList.filter = function(array, callback, context) {
	var out = [];
	out.item = function(index) { return this[index]; }
	var n = array.length;
	for (var i=0; i<n; i++) {
		var node = array.item(i);
		callback.call(context, node, i, array) && out.push(node);
	}
	return out;
}
NodeList.forEach = function(array, callback, context) {
	var n = array.length;
	for (var i=0; i<n; i++) {
		var node = array.item(i);
		callback.call(context, node, i, array);
	}
}
NodeList.every = function(array, callback, context) {
	var n = array.length;
	for (var i=0; i<n; i++) {
		var node = array.item(i);
		if (!callback.call(context, node, i, array)) return false;
	}
	return true;
}
NodeList.some = function(array, callback, context) {
	var n = array.length;
	for (var i=0; i<n; i++) {
		var node = array.item(i);
		if (callback.call(context, node, i, array)) return true;
	}
	return false;
}
Array.forEach(["every", "filter", "forEach", "some"], function(name) {
	Array["_"+name] = Array[name];
	Array[name] = function(array) {
		var delegate = (array.item) ? NodeList[name] : Array["_" + name];
		return delegate.apply(this, arguments);;
	}
});

var domSystem = Meeko.stuff.domSystem;

if (window.Element === domSystem.Element) { // NOTE only if no native DOM prototypes

var createInterface = function(fields) {
	var iface = function() {};
	for (var n=fields.length, i=0; i<n; i++) {
		var name = fields[i];
		iface.prototype[name] = new Function('var node = this.baseBinding["' + name + '"](); if (node) { this.currentNode = node; Meeko.stuff.domSystem.attach(node); } return node;');
	}
	return iface;
}

var TreeWalker = createInterface(["firstChild", "lastChild", "parentNode", "nextSibling", "previousSibling", "nextNode", "previousNode"]);
TreeWalker.prototype.forEach = function(callback, context) { return this.baseBinding.forEach.call(this, callback, context); }
var NodeIterator = createInterface(["nextNode", "previousNode"]);
NodeIterator.prototype.forEach = function(callback, context) { return this.baseBinding.forEach.call(this, callback, context); }

Document.prototype._createTreeWalker = document.createTreeWalker;
Document.prototype.createTreeWalker = function(root, whatToShow, filter, entityReferenceExpansion) {
	var iter = new TreeWalker();
	iter.baseBinding = document._createTreeWalker(root, whatToShow, filter, entityReferenceExpansion);
	return iter;
}
Document.prototype._createNodeIterator = document.createNodeIterator;
Document.prototype.createNodeIterator = function(root, whatToShow, filter, entityReferenceExpansion) {
	var iter = new NodeIterator();
	iter.baseBinding = document._createNodeIterator(root, whatToShow, filter, entityReferenceExpansion);
	return iter;
}

}

/*
 fixes for IE versions < 8
 TODO feature check to see if necessary
*/
document.__getElementById = document.getElementById;
document.getElementById = function(id) {
	var elt = this.__getElementById(id);
	if (!elt) return null;
	if (elt.attributes['id'].nodeValue == id) return elt;
	// NOTE if getElementById is effectively getElementByIdOrName then assume getElementsByName is getElementsByIdOrName
	var list = this.__getElementsByName(id);
	for (var n=list.length, i=0; i<n; i++) {
		elt = list.item(i);
		if (elt.attributes['id'].nodeValue == id) return elt;
	}
	return null;
}
document.__getElementsByName = document.getElementsByName;
document.getElementsByName = function(name) { // NOTE this returns a "StaticNodeList" rather than a NodeList
	var coll = Array.filter(this.__getElementsByName(name), function(elt) { return (elt.attributes['name'].nodeValue == name); })
	coll.item = function(index) { return this[index]; }
	return coll;
}

/*
 HTMLCollection fixes for IE versions < 8
 we want to remove the whole native HTMLCollection interface 
 and provide access through the programmed iface.
 This allows us to prevent access via array ([]) notation.
 
 FIXME this used to be cross-platform fixes, but should now only be IE < 8
 TODO refactor NodeList and HTMLCollection as DOM bindings?? Move to Core and HTML??
*/

if (!domSystem.NodeList) domSystem.NodeList = function() {};
if (!domSystem.HTMLCollection) domSystem.HTMLCollection = function() {};

if (window.Element === domSystem.Element) with(domSystem) (function() { // NOTE only if no native DOM prototypes

var NodeList = domSystem.NodeList;
var HTMLCollection = domSystem.HTMLCollection;

NodeList.fix = function(base) {
	var coll = {};
	coll._base = base;
	coll.item = function(index) { 
		var item = this._base[index]; 
		if (item) domSystem.attach(item);
		return item;
	}
	// NOTE maybe just copy the length property
	Object.defineProperty(coll, "length", { get: function() { return this._base.length; } });
	return coll;
}
NodeList.fixInterface = function(target, field) {
	var base = target[field]; // base points to the native interface
	target["_"+field] = base; 
	var coll = this.fix(base);
	Object.defineProperty(target, field, { value: coll });
}

HTMLCollection.fix = function(base) {
	var coll = {};
	coll._base = base;
	coll.item = function(index) { 
		var item = this._base[index]; 
		if (item) domSystem.attach(item);
		return item;
	}
	coll.namedItem = function(name) { 
		var item = this._base[name]; 
		if (item) domSystem.attach(item);
		return item;
	}
	// TODO maybe just copy the length property
	Object.defineProperty(coll, "length", { get: function() { return this._base.length; } });
	return coll;
}
HTMLCollection.fixInterface = function(target, field) {
	var base = target[field]; // base points to the native interface
	target["_"+field] = base; 
	var coll = this.fix(base);
	Object.defineProperty(target, field, { value: coll });
}
HTMLCollection.addInterface = function(target, field, filter) {
	var coll = {};
	coll._target = target,
	coll.item = function(index) {
		var i = -1, node = this._target.firstChild;
		while (node) {
			if (node.nodeType == 1) { // Node.ELEMENT_NODE
				if (!filter || filter(node) == 1) i++; // NodeFilter.FILTER_ACCEPT
				if (index == i) return domSystem.attach(node);
			}
			node = node.nextSibling;
		}
		return null;
	}
	Object.defineProperty(coll, "length", { get: function() {
		var i = 0, node = this._target.firstChild;
		while (node) {
			if (node.nodeType == 1) { // Node.ELEMENT_NODE
				if (!filter || filter(node) == 1) i++; // NodeFilter.FILTER_ACCEPT
			}
			node = node.nextSibling;
		}
		return i;						
	} });
	Object.defineProperty(target, field, { value: coll });
}

// Document._attach = Document.attach;
// Document.attach = function(target) {
// this._attach(target);
function fixDocument(target) {
	target._getElementById = target.getElementById;
	target.getElementById = function(id) {
		var elt = this._getElementById(id);
		if (elt) domSystem.attach(elt);
		return elt;
	}
/*
	target._getElementsByTagName = target.getElementsByTagName;
	target.getElementsByTagName = function(tagName) {
		var coll = this._getElementsByTagName(tagName);
		return NodeList.fix(coll);
	}
*/
}
fixDocument(window.document);
Document._detach = Document.detach;
Document.detach = function(target) {
	target.getElementById = target.__getElementById;
	target._getElementById = null
	target.__getElementById = null;
/*
	target.getElementsByTagName = target._getElementsByTagName;
	target._getElementsByTagName = null
*/
	this._detach(target);
}
//HTMLDocument._attach = HTMLDocument.attach;
//HTMLDocument.attach = function(target) {
//	this._attach(target);
function fixHTMLDocument(target) {
	target._getElementsByName = target.getElementsByName;
	target.getElementsByName = function(name) {
		var coll = this._getElementsByName(name);
		var fixed = NodeList.fix(coll);
		return fixed;
	}
	target._querySelector = target.querySelector;
	target.querySelector = function(name) {
		var elt = this._querySelector(name);
		if (elt) domSystem.attach(elt);
		return elt;
	}
	target._querySelectorAll = target.querySelectorAll;
	target.querySelectorAll = function(name) {
		var coll = this._querySelectorAll(name);
		return NodeList.fix(coll);
	}
}
fixHTMLDocument(window.document);
HTMLDocument._detach = HTMLDocument.detach;
HTMLDocument.detach = function(target) {
	target.getElementsByName = target.__getElementsByName;
	target._getElementsByName = null
	target.__getElementsByName = null;
	target.querySelector = target._querySelector;
	target._querySelector = null;
	target.querySelectorAll = target._querySelectorAll;
	target._querySelectorAll = null;
	this._detach(target);
}
HTMLElement._attach = HTMLElement.attach;
HTMLElement._detach = HTMLElement.detach;
HTMLElement.attach = function(target) {
	this._attach(target);
	if (target.children) HTMLCollection.fixInterface(target, "children");
	else HTMLCollection.addInterface(target, "children");
	target._querySelector = target.querySelector;
	target.querySelector = function(name) {
		var elt = this._querySelector(name);
		if (elt) domSystem.attach(elt);
		return elt;
	}
	target._querySelectorAll = target.querySelectorAll;
	target.querySelectorAll = function(name) {
		var coll = this._querySelectorAll(name);
		return NodeList.fix(coll);
	}
}
HTMLElement.detach = function(target) {
	target.children = target._children;
	target._children = null;
	target.querySelector = target._querySelector;
	target._querySelector = null;
	target.querySelectorAll = target._querySelectorAll;
	target._querySelectorAll = null;
	this._detach(target);
}

HTMLFormElement._attach = HTMLFormElement.attach;
HTMLFormElement._detach = HTMLFormElement.detach;
HTMLFormElement.attach = function(target) {
	this._attach(target);
	HTMLCollection.fixInterface(target, "elements");
}
HTMLFormElement._detach = function(target) {
	target.elements = target._elements;
	target._elements = null;
	this._detach(target);
}
HTMLSelectElement._attach = HTMLSelectElement.attach;
HTMLSelectElement._detach = HTMLSelectElement.detach;
HTMLSelectElement.attach = function(target) {
	if (target.form) domSystem.attach(target.form);
	this._attach(target);
	HTMLCollection.fixInterface(target, "options");
}
HTMLSelectElement._detach = function(target) {
	target.options = target._options;
	target._options = null;
	this._detach(target);
}
HTMLInputElement._attach = HTMLInputElement.attach;
HTMLInputElement._detach = HTMLInputElement.detach;
HTMLInputElement.attach = function(target) {
	if (target.form) domSystem.attach(target.form);
	this._attach(target);
}
HTMLInputElement._detach = function(target) {
	this._detach(target);
}
HTMLTableElement._attach = HTMLTableElement.attach;
HTMLTableElement._detach = HTMLTableElement.detach;
HTMLTableElement.attach = function(target) {
	this._attach(target);
	if (target.tHead) domSystem.attach(target.tHead);
	if (target.tFoot) domSystem.attach(target.tFoot);
	HTMLCollection.fixInterface(target, "tBodies");
	HTMLCollection.fixInterface(target, "rows");
}
HTMLTableElement._detach = function(target) {
	target.tBodies = target._tBodies;
	target._tBodies = null;
	target.rows = target._rows;
	target._rows = null;
	this._detach(target);
}
HTMLTableSectionElement._attach = HTMLTableSectionElement.attach;
HTMLTableSectionElement._detach = HTMLTableSectionElement.detach;
HTMLTableSectionElement.attach = function(target) {
	this._attach(target);
	HTMLCollection.fixInterface(target, "rows");
}
HTMLTableSectionElement._detach = function(target) {
	target.rows = target._rows;
	target._rows = null;
	this._detach(target);
}
HTMLTableRowElement._attach = HTMLTableRowElement.attach;
HTMLTableRowElement._detach = HTMLTableRowElement.detach;
HTMLTableRowElement.attach = function(target) {
	this._attach(target);
	HTMLCollection.fixInterface(target, "cells");
}
HTMLTableRowElement._detach = function(target) {
	target.cells = target._cells;
	target._cells = null;
	this._detach(target);
}

})() //=> with(domSystem);

// FIXME this should be in a DOM module
if (!window.getComputedStyle && document.documentElement.currentStyle) {
function toCamelCase(name) {
	var tokens = name.split("-");
	for (var i=tokens.length-1; i>=1; i--) {
		var token = tokens[i];
		tokens[i] = token.charAt(0).toUpperCase() + token.substring(1);
	}
	return tokens.join("");
}
var CSSStyleDeclaration = function(config) { // FIXME can we do better than cloning the style object??
	for (var slot in config) this[slot] = config[slot];
}
CSSStyleDeclaration.getPropertyValue = function(prop) {
	return this[toCamelCase(prop)];
}
Window.prototype.getComputedStyle = function(elt, pseudo) { // FIXME don't handle pseudo
	return new CSSStyleDeclaration(elt.currentStyle);
}
}

]]>
</script>
</head>
</html>
