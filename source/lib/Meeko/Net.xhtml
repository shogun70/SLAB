<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<script type="text/javascript">
<![CDATA[

/*
	URIParser (a wrapper class for parseUri), MIT License
	URIParser by Sean Hogan <http://www.meekostuff.net>
	parseUri by Steven Levithan <http://stevenlevithan.com>
*/

Meeko.stuff.xplSystem.createNamespace("Meeko.Net");
Meeko.Net.URIParser = (function() {
	
var parseUri = function (source) {
	var o = parseUri.options,
		value = o.parser[o.strictMode ? "strict" : "loose"].exec(source);
	
	for (var i = 0, uri = {}; i < 14; i++) {
		uri[o.key[i]] = value[i] || "";
	}
	
	uri[o.q.name] = {};
	uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
		if ($1) uri[o.q.name][$1] = $2;
	});
	
	return uri;
};

parseUri.options = {
	strictMode: true,
	key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
	q: {
		name: "queryKey",
		parser: /(?=.)&?([^&=]*)=?([^&]*)/g
	},
	parser: {
		strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
		loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	}
};

var URIParser = function(base) {
	this.base = base;
}

URIParser.parseUri = function(src, base) {
	if (null != src && "string" != typeof src) src = src.toString(); // NOTE IE String.match doesn't handle duck-typing
	if (null != base && "string" != typeof base) base = base.toString();
	var m = src.match(/^([^:\/?#]+):/);
	var scheme = (m && m.length > 1) ? m[1] : "";
	switch (scheme) {
		case "http":
		case "https":
		case "ftp":
		case "file":
		case "":
			var uri = parseUri(src);
			var baseURI = parseUri(base);
			if (!uri.protocol) {
				uri.protocol = baseURI.protocol;
				uri.authority = baseURI.authority;
				uri.userInfo = baseURI.userInfo;
				uri.user = baseURI.user;
				uri.password = baseURI.password;
				uri.host = baseURI.host;
				uri.port = baseURI.port;
				var directory = (uri.path.match(/^\//)) ? uri.directory : baseURI.directory + uri.directory;
				var file = (uri.file) ? uri.file : (uri.anchor || uri.query) ? baseURI.file : "";
				uri.directory = directory;
				uri.file = file;
				uri.path = directory + file;
				var query = (uri.query) ? "?" + uri.query : "";
				var anchor = (uri.anchor) ? "#" + uri.anchor : "";
				uri.relative = directory + file + query + anchor;
				uri.source = src;
			}
			uri.href = uri.protocol + "://" + uri.authority + uri.path;
			if (uri.query) uri.href += "?" + uri.query;
			uri.toString = function() { return this.protocol + "://" + this.authority + this.relative; }
			return uri;
			break;
	
		default:
			return {
				protocol: scheme,
				source: src,
				href: src,
				toString: function() { return this.source; }
			}
			break;
	}

}

URIParser.prototype.parseUri = function(src) {
	return URIParser.parseURI(src, this.base);
}

return URIParser;

})();

]]>
</script>
</head>
</html>