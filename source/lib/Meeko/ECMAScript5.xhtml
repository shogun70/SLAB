<?xml version="1.0"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<script>
<![CDATA[
if (!this.Meeko) this.Meeko = {};

Meeko['ECMAScript5'] = (function() {

var _global = this;

var Object = function() {}
Object.prototype = new _global.Object();

var __defineProperty__ = function(object, field, desc) {
	if ((desc.get || desc.set) && desc.value != null) throw "value is incompatible with get, set";
	if (desc.value != null) {
		if (delete object[field] && object[field] == null) object[field] = desc.value; 
		else object.__defineGetter__(field, function() { return desc.value; });
	}
	if (desc.get) object.__defineGetter__(field, desc.get);
	if (desc.set) object.__defineSetter__(field, desc.set);
	return object;
}
var defineProperty = function(object, field, desc) { 
	if ((desc.get || desc.set) && undefined != desc.value) throw "value is incompatible with get, set";
	if (desc.set) throw "setters not implemented";
	var value = (desc.get) ? {
			valueOf: desc.get.bind(object),
			toString: desc.get.bind(object)
		} : desc.value;
	try {
		if (desc.value) object[field] = desc.value;
		if (desc.get) object[field] = {
			valueOf: desc.get.bind(object),
			toString: desc.get.bind(object)
		}
	}
	catch (error) {
		if (object.nodeType != 1) throw "Object.defineProperty not valid for non-Element nodes";
		var attr = document.createAttribute(field);
		attr.nodeValue = value;
		object.setAttributeNode(attr);
	}
	return object;
}
Object.defineProperty = (_global.Object.prototype.__defineGetter__) ? __defineProperty__ : defineProperty;

	
// NOTE non-standard Object methods
Object.copy = function(dest, source, fields, override) {
	function _copy(dst, src, name, over) {
		if (!over && (dst.hasOwnProperty && dst.hasOwnProperty(name) || dst[name] != null)) return;
		dst[name] = src[name];
	}
	if (fields && fields.length) {
		for (var n=fields.length, i=0; i<n; i++) {
			var name = fields[i];
			_copy(dest, source, name, override);
		}
	}
	else {
		for (var name in source) _copy(dest, source, name, override);
	}
	return dest;
}

Object.toLoggerString = function(object) { // NOTE the complexity here is work-arounds for Safari-2
	var string = "";
	for (var field in object) {
		var slot = object[field];
		var t = typeof slot;
		var sz;
		try { if (t == "object" && slot.length) t = "array"; }
		catch (error) { }
		try { var sz = "" + slot; }
		catch (error) { t = "null"; }
		if (t == "function") string += field + ": " + "function() {}" + "\n";
		else if (t == "array") string += field + ": " + "[ " + slot + " ]" + "\n";
		else if (t == "null") string += field + ": " + "null" + "\n";
		else string += field + ": " + slot + "\n";
	}
	return string;
}

Object.forEach = function(object, callback, context) {
	for (var key in object) {
		var val = object[key];
		if (typeof val != "function") callback.call(context, val, key, object);
	}
}

var Array = function() {
	this[0] = true;
	if (this.length) {
		delete this[0];
		for (var i=0; i<arguments.length; i++) this[i] = arguments[i];
		return;
	}
	else {
		var a = _global.Array.apply(_global, arguments);
		Object.copy(a, arguments.callee.prototype);
		return a;
	}
}
Array.prototype = new _global.Array();

Array.prototype.indexOf = function(val, start) {
	var array = this;
	var n = array.length;
	if (start == null) start = 0;
	for (var i=start; i<n; i++) {
		if (val == array[i]) return i;
	}
	return -1;
}

Array.prototype.lastIndexOf = function(val, start) {
	var array = this;
	var n = array.length;
	if (start == null) start = n-1;
	for (var i=start; i>=0; i--) {
		if (val == array[i]) return i;
	}
	return -1;
}

Array.prototype.filter = function(callback, context) {
	var array = this;
	var out = [];
	var n = array.length;
	for (var i=0; i<n; i++) {
		var rc = callback.call(context, array[i], i, array);
		if (rc) out.push(array[i]);
	}
	return out;
}

Array.prototype.every = function(callback, context) {
	var array = this;
	var n = array.length;
	for (var i=0; i<n; i++) {
		var rc = callback.call(context, array[i], i, array);
		if (!rc) return false;
	}
	return true;
}

Array.prototype.forEach = function(callback, context) {
	var array = this;
	var n = array.length;
	for (var i=0; i<n; i++) {
		callback.call(context, array[i], i, array);
	}
}


Array.prototype.map = function(callback, context) {
	var array = this;
	var out = [];
	var n = array.length;
	for (var i=0; i<n; i++) {
		var rc = callback.call(context, array[i], i, array);
		out[i] = rc;
	}
	return out;
}

Array.prototype.some = function(callback, context) {
	var array = this;
	var n = array.length;
	for (var i=0; i<n; i++) {
		var rc = callback.call(context, array[i], i, array);
		if (rc) return true;
	}
	return false;
}

// NOTE non-standard Array methods
Array.prototype.compare = function(array2, cmp) { // NOTE compares n elements where n is length of shorter array
	var array1 = this;
	if (!cmp) cmp = function(a,b) { return (a < b) ? -1 : (a > b) ? 1 : 0 };
	var rc = 0;
	var n1 = array1.length, n2 = array2.length, n = (n1 <= n2) ? n1 : n2;
	for (var i=0; i<n; i++) {
		if (rc = cmp(array1[i], array2[i])) return rc;
	}
	return rc;
}

Array.indexOf = function(array, val, start) { return this.prototype.indexOf.call(array, val, start); }
Array.lastIndexOf = function(array, val, start) { return this.prototype.lastIndexOf.call(array, val, start); }
Array.every = function(array, callback, context) { return this.prototype.every.call(array, callback, context); }
Array.filter = function(array, callback, context) { return this.prototype.filter.call(array, callback, context); }
Array.forEach = function(array, callback, context) { return this.prototype.forEach.call(array, callback, context); }
Array.map = function(array, callback, context) { return this.prototype.map.call(array, callback, context); }
Array.some = function(array, callback, context) { return this.prototype.some.call(array, callback, context); }
Array.compare = function(array1, array2, cmp) { return this.prototype.compare.call(array1, array2, cmp); }

var Function = function() {
		var fn = _global.Function.apply(_global, arguments);
		Object.copy(fn, arguments.callee.prototype);
		return fn;	
}
Function.prototype = new _global.Function;

Function.prototype.bind = function(target) {
	if (arguments.length > 1) throw "This implementation of Function.prototype.bind() does not support arguments other than the bound target."
	var boundMethod = function() { return arguments.callee.__call__.apply(arguments.callee.__target__, arguments); }
	boundMethod.__target__ = target;
	boundMethod.__call__ = this;
	return boundMethod;
}

return {
	Object: Object,
	Array: Array,
	Function: Function
}

})();

Meeko.XPL.Namespace.enhance(window, Meeko['ECMAScript5']);

]]>
</script>
</head>
</html>